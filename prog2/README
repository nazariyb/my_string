it is thought that terminal is opened in the next path
../prog2$, where:
some_folder/
    |
    |__/library/
    |    |
    |    |__/bin/
    |    |   |
    |    |   |__/lib_my_string.so
    |    |
    |    |__(other files)
    |
    |__/prog2/
         |
         |__/bin/
         |   |
         |   |__/prog2
         |
         |__(other files)

to build project using cmake you should enter the next commands
1)../prog2$ mkdir <build folder> && cd <build folder>

f. e.
../prog2$ mkdir build && cd build

2)../prog2/<build folder>$ cmake .. && make

f. e.
..prog2/build$ cmake .. && make
*output*
-- The C compiler identification is GNU 7.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: <your path>/prog2/build
Scanning dependencies of target prog2
[ 50%] Building C object CMakeFiles/prog2.dir/prog2.c.o
[100%] Linking C executable prog2
[100%] Built target prog2

3)../prog2/<build folder>$ cd ..

now, you can run program calling it with arguments:
    <input file name>.txt* (required)
    <input file name>.<extension> (optional, it will be autogenerated otherwise)
    *it's required for input file to be a text document (with extension ".txt")

it will be look like:
../prog2$ ./bin/prog2 <input file name>.txt

f. e.
../prog2$ ./bin/prog2 sample.txt


File have been opened successfully
File have been written
File have been closed

# otherwise
../prog2$ ./bin/prog2 sample1.txt
Error while opening file

# or if the file have wrong extension
../prog2$ ./bin/prog2 sample
Error while opening file

# you can also specify yje output file like this
# it's also an example of autogenerated output file name
# you can specify any extension for it you want
../prog2$ ./bin/prog2 sample.txt sample_out.txt
File have been opened successfully
File have been written
File have been closed

# there is also a possibilityto compile program manually:
# (! it will be saved in the same directory but not in bin/)
../prog2$ gcc prog2.c ../library/my_string.c ../library/my_string.h -o prog2test -I ../library

# if you wish compile the program with debug mode
../porg2$ gcc prog2.c ../library/my_string.c ../library/my_string.h -o prog2debug -I ../library -g -W -Og

# and run it with valgring
../prog2$ valgrind --leak-check=full --track-origins=yes ./prog2debug sample.txt
==5023== Memcheck, a memory error detector
==5023== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5023== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==5023== Command: ./prog2debug sample.txt
==5023==
File have been opened successfully
File have been written
File have been closed
==5023==
==5023== HEAP SUMMARY:
==5023==     in use at exit: 0 bytes in 0 blocks
==5023==   total heap usage: 10 allocs, 10 frees, 13,553 bytes allocated
==5023==
==5023== All heap blocks were freed -- no leaks are possible
==5023==
==5023== For counts of detected and suppressed errors, rerun with: -v
==5023== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)